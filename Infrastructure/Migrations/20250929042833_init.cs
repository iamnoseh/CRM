using System;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class init : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.Sql(@"DROP INDEX IF EXISTS ""IX_Users_Email"";");
            migrationBuilder.Sql(@"DROP INDEX IF EXISTS ""IX_Students_Email"";");
            migrationBuilder.Sql(@"DROP INDEX IF EXISTS ""IX_Mentors_Email"";");

            migrationBuilder.AddColumn<decimal>(
                name: "DiscountAmount",
                table: "Payments",
                type: "numeric(18,2)",
                precision: 18,
                scale: 2,
                nullable: false,
                defaultValue: 0m);

            migrationBuilder.AddColumn<decimal>(
                name: "OriginalAmount",
                table: "Payments",
                type: "numeric(18,2)",
                precision: 18,
                scale: 2,
                nullable: false,
                defaultValue: 0m);

            // Check if Expenses table exists before creating it
            migrationBuilder.Sql(@"
                DO $$ 
                BEGIN
                    IF NOT EXISTS (SELECT FROM information_schema.tables 
                                   WHERE table_schema = 'public' 
                                   AND table_name = 'Expenses') THEN
                        CREATE TABLE ""Expenses"" (
                            ""Id"" integer GENERATED BY DEFAULT AS IDENTITY,
                            ""CenterId"" integer NOT NULL,
                            ""Amount"" numeric(18,2) NOT NULL,
                            ""ExpenseDate"" timestamp with time zone NOT NULL,
                            ""Category"" text NOT NULL,
                            ""PaymentMethod"" text NOT NULL,
                            ""Description"" text,
                            ""MentorId"" integer,
                            ""Month"" integer NOT NULL,
                            ""Year"" integer NOT NULL,
                            ""CreatedAt"" timestamp with time zone NOT NULL,
                            ""UpdatedAt"" timestamp with time zone NOT NULL,
                            ""IsDeleted"" boolean NOT NULL,
                            CONSTRAINT ""PK_Expenses"" PRIMARY KEY (""Id""),
                            CONSTRAINT ""FK_Expenses_Centers_CenterId"" FOREIGN KEY (""CenterId"") REFERENCES ""Centers"" (""Id"") ON DELETE CASCADE,
                            CONSTRAINT ""FK_Expenses_Mentors_MentorId"" FOREIGN KEY (""MentorId"") REFERENCES ""Mentors"" (""Id"") ON DELETE SET NULL
                        );
                    END IF;
                END $$;
            ");

            migrationBuilder.CreateTable(
                name: "Leads",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    FullName = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    PhoneNumber = table.Column<string>(type: "character varying(13)", maxLength: 13, nullable: false),
                    BirthDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Gender = table.Column<int>(type: "integer", nullable: false),
                    OccupationStatus = table.Column<int>(type: "integer", nullable: false),
                    RegisterForMonth = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    Course = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: true),
                    LessonTime = table.Column<TimeSpan>(type: "interval", nullable: false),
                    Notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: false),
                    UtmSource = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    CenterId = table.Column<int>(type: "integer", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    UpdatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    IsDeleted = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Leads", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Leads_Centers_CenterId",
                        column: x => x.CenterId,
                        principalTable: "Centers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MonthlyFinancialSummaries",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    CenterId = table.Column<int>(type: "integer", nullable: false),
                    Month = table.Column<int>(type: "integer", nullable: false),
                    Year = table.Column<int>(type: "integer", nullable: false),
                    TotalIncome = table.Column<decimal>(type: "numeric(18,2)", precision: 18, scale: 2, nullable: false),
                    TotalExpense = table.Column<decimal>(type: "numeric(18,2)", precision: 18, scale: 2, nullable: false),
                    NetProfit = table.Column<decimal>(type: "numeric(18,2)", precision: 18, scale: 2, nullable: false),
                    GeneratedDate = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    IsClosed = table.Column<bool>(type: "boolean", nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    UpdatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    IsDeleted = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MonthlyFinancialSummaries", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MonthlyFinancialSummaries_Centers_CenterId",
                        column: x => x.CenterId,
                        principalTable: "Centers",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "StudentGroupDiscounts",
                columns: table => new
                {
                    Id = table.Column<int>(type: "integer", nullable: false)
                        .Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
                    StudentId = table.Column<int>(type: "integer", nullable: false),
                    GroupId = table.Column<int>(type: "integer", nullable: false),
                    DiscountAmount = table.Column<decimal>(type: "numeric(18,2)", precision: 18, scale: 2, nullable: false),
                    CreatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    UpdatedAt = table.Column<DateTimeOffset>(type: "timestamp with time zone", nullable: false),
                    IsDeleted = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_StudentGroupDiscounts", x => x.Id);
                    table.ForeignKey(
                        name: "FK_StudentGroupDiscounts_Groups_GroupId",
                        column: x => x.GroupId,
                        principalTable: "Groups",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_StudentGroupDiscounts_Students_StudentId",
                        column: x => x.StudentId,
                        principalTable: "Students",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email");

            // Create indexes for Expenses table if they don't exist
            migrationBuilder.Sql(@"
                DO $$ 
                BEGIN
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Expenses_Category') THEN
                        CREATE INDEX ""IX_Expenses_Category"" ON ""Expenses"" (""Category"");
                    END IF;
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Expenses_CenterId') THEN
                        CREATE INDEX ""IX_Expenses_CenterId"" ON ""Expenses"" (""CenterId"");
                    END IF;
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Expenses_ExpenseDate') THEN
                        CREATE INDEX ""IX_Expenses_ExpenseDate"" ON ""Expenses"" (""ExpenseDate"");
                    END IF;
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Expenses_MentorId') THEN
                        CREATE INDEX ""IX_Expenses_MentorId"" ON ""Expenses"" (""MentorId"");
                    END IF;
                    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'IX_Expenses_Month_Year') THEN
                        CREATE INDEX ""IX_Expenses_Month_Year"" ON ""Expenses"" (""Month"", ""Year"");
                    END IF;
                END $$;
            ");

            migrationBuilder.CreateIndex(
                name: "IX_Leads_CenterId",
                table: "Leads",
                column: "CenterId");

            migrationBuilder.CreateIndex(
                name: "IX_MonthlyFinancialSummary_Center_Year_Month",
                table: "MonthlyFinancialSummaries",
                columns: new[] { "CenterId", "Year", "Month" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_StudentGroupDiscount_Student_Group_IsDeleted",
                table: "StudentGroupDiscounts",
                columns: new[] { "StudentId", "GroupId", "IsDeleted" });

            migrationBuilder.CreateIndex(
                name: "IX_StudentGroupDiscounts_GroupId",
                table: "StudentGroupDiscounts",
                column: "GroupId");

            migrationBuilder.CreateIndex(
                name: "IX_StudentGroupDiscounts_StudentId",
                table: "StudentGroupDiscounts",
                column: "StudentId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            // Drop Expenses table if it exists
            migrationBuilder.Sql(@"DROP TABLE IF EXISTS ""Expenses"" CASCADE;");

            migrationBuilder.DropTable(
                name: "Leads");

            migrationBuilder.DropTable(
                name: "MonthlyFinancialSummaries");

            migrationBuilder.DropTable(
                name: "StudentGroupDiscounts");

            migrationBuilder.DropIndex(
                name: "IX_Users_Email",
                table: "Users");

            migrationBuilder.DropColumn(
                name: "DiscountAmount",
                table: "Payments");

            migrationBuilder.DropColumn(
                name: "OriginalAmount",
                table: "Payments");

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Students_Email",
                table: "Students",
                column: "Email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Mentors_Email",
                table: "Mentors",
                column: "Email",
                unique: true);
        }
    }
}
